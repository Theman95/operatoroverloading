import math
from cisc108 import assert_equal

KIND_PLAYER = 1
KIND_FOOD = 2
KIND_AI = 3
MASS_EAT = 1.25

class Blob:

    def __init__(self, mass, x, y, world_width, world_height, kind):
        self.mMass = float(mass)  # mass
        self.mX = float(x)        # x position
        self.mY = float(y)        # y position
        self.mDx = 0.             # portion of speed that comes from x
        self.mDy = 0.             # portion of speed that comes from y
        self.mKind = kind         # kind of blob
        self.mAlive = True        # blob's life status

        # size of the world, used for bounding motion
        self.mWorldWidth = world_width
        self.mWorldHeight = world_height
        # used to scale the speed to tune game play
        self.mSpeedMultiplier = 10.0
        # used to scale the display size of blobs
        self.mRadiusMultiplier = 5.0
        # used to make sure 1 frame's motion doesn't overshoot the destination
        self.mDestinationSpeed = 0.0
        return

    def getMass(self):
        return self.mMass

    def getX(self):
        return self.mX

    def getY(self):
        return self.mY

    def getAlive(self):
        return self.mAlive

    def getKind(self):
        return self.mKind

    def getSpeed(self):
        speed_multi = self.mSpeedMultiplier / math.log(self.mMass)
        if self.mDestinationSpeed > speed_multi:
            return speed_multi
        else:
            return self.mDestinationSpeed

    def getRadius(self):
        r = math.sqrt(self.mMass / math.pi)
        area = self.mRadiusMultiplier * r
        return area
    
    def __ne__(self,other):
        x = (self.mX, self.mY)
        if x != other:
            return True
        else:
            return False
        
    def __gt__(self,other):
        if (self.mMass / other.mMass) > MASS_EAT:
            return True
        else:
            return False
        
    def __iadd__(self,other):
        self.mMass += other.mMass
        other.mAlive = False
        other.mMass = 0.0
        return self
    
    def __xor__(self,other):
        d = math.sqrt((self.mX-other.mX)**2 + (self.mY-other.mY)**2)
        radius_other = math.sqrt(other.mMass/math.pi)
        radius_self = math.sqrt(self.mMass/math.pi)
        larger_variable = max(radius_other,radius_self)
        # the d is always larger
        if larger_variable > d:
            return True
        else:
            return False
            
b1 = Blob(math.pi,    50., 50., 500, 400, KIND_AI)
# radius 10
b2 = Blob(4.*math.pi, 60.1, 50., 600, 500, KIND_PLAYER)
# radius 10
b3 = Blob(4.*math.pi, 59.9, 50., 600, 500, KIND_PLAYER)
# radius 10
b4 = Blob(4.*math.pi, 50., 60.1, 600, 500, KIND_PLAYER)
# radius 10
b5 = Blob(4.*math.pi, 50., 59.9, 600, 500, KIND_PLAYER)
assert_equal(False, b1 ^ b5)
assert_equal(True, b1 ^ b3) #this
assert_equal(False, b1 ^ b4)
assert_equal(True, b1 ^ b5) #this

assert_equal(False, b2 ^ b1)
assert_equal(True, b3 ^ b1) #this
assert_equal(False, b4 ^ b1)
assert_equal(True, b5 ^ b1) #this


        
